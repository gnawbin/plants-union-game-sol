{
  "address": "0xA734115684BBca662C7FdACfcb51e1f7CABDAFDC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "roleName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "avatarId",
          "type": "uint8"
        }
      ],
      "name": "RoleCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_avatarId",
          "type": "uint8"
        }
      ],
      "name": "createRole",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRole",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "getRoleByName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "roleExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "prizes",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "gold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "levelup_exp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total_exp",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "hunting_num",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "garden_plant_num",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "public_place_num",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "war_grid_num",
              "type": "uint8"
            }
          ],
          "internalType": "struct LevelConfig.LevelCfg[]",
          "name": "config",
          "type": "tuple[]"
        }
      ],
      "name": "setLevelConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23f7303f0d7d2ea6305d314b5bd9742fe7e599c08d3679082d92086ba0ee0911",
  "receipt": {
    "to": null,
    "from": "0x7237Ed4c3A594Caa8DD97F6FB3287798708Ed581",
    "contractAddress": "0xA734115684BBca662C7FdACfcb51e1f7CABDAFDC",
    "transactionIndex": 48,
    "gasUsed": "1390887",
    "logsBloom": "0x
    "blockHash": "0x5506d5a5e2a9335947b1076cdf98746d37e193b118919feab417d3f52d785013",
    "transactionHash": "0x23f7303f0d7d2ea6305d314b5bd9742fe7e599c08d3679082d92086ba0ee0911",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 8179349,
        "transactionHash": "0x23f7303f0d7d2ea6305d314b5bd9742fe7e599c08d3679082d92086ba0ee0911",
        "address": "0xA734115684BBca662C7FdACfcb51e1f7CABDAFDC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007237ed4c3a594caa8dd97f6fb3287798708ed581"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x5506d5a5e2a9335947b1076cdf98746d37e193b118919feab417d3f52d785013"
      }
    ],
    "blockNumber": 8179349,
    "cumulativeGasUsed": "5870196",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "59bc13c92dc3ae08ee3f6381380a1502",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"roleName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"avatarId\",\"type\":\"uint8\"}],\"name\":\"RoleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_avatarId\",\"type\":\"uint8\"}],\"name\":\"createRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRole\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getRoleByName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"roleExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"prizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelup_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"hunting_num\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"garden_plant_num\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"public_place_num\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"war_grid_num\",\"type\":\"uint8\"}],\"internalType\":\"struct LevelConfig.LevelCfg[]\",\"name\":\"config\",\"type\":\"tuple[]\"}],\"name\":\"setLevelConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setLevelConfig((uint256,uint256[],uint256,uint256,uint256,uint8,uint8,uint8,uint8)[])\":{\"details\":\"\\u662f\\u5426\\u5141\\u8bb8\\u591a\\u6b21\\u8bbe\\u7f6e\\u5462\\uff0c\\u6709\\u5f85\\u5546\\u69b7!!!\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createRole(string,uint8)\":{\"notice\":\"\\u521b\\u5efa\\u89d2\\u8272 \\u5f53\\u7528\\u6237\\u8c03\\u7528\\u6b64\\u51fd\\u6570\\u65f6\\uff0c\\u5b83\\u5c06\\u68c0\\u67e5\\u89d2\\u8272\\u540d\\u79f0\\u662f\\u5426\\u4e3a\\u7a7a\\u3001\\u89d2\\u8272\\u662f\\u5426\\u5df2\\u7ecf\\u5b58\\u5728\\u4ee5\\u53ca\\u7528\\u6237\\u662f\\u5426\\u5df2\\u7ecf\\u6709\\u4e00\\u4e2a\\u89d2\\u8272\\u3002 \\u5982\\u679c\\u8fd9\\u4e9b\\u6761\\u4ef6\\u5747\\u6ee1\\u8db3\\uff0c\\u5219\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u89d2\\u8272\\uff0c\\u5e76\\u5c06\\u5176\\u6dfb\\u52a0\\u5230\\u6620\\u5c04\\u548c allRoles \\u6570\\u7ec4\\u4e2d\\u3002\"},\"getRole()\":{\"notice\":\"\\u83b7\\u53d6\\u7528\\u6237\\u7684\\u89d2\\u8272\\uff0c\\u8fd4\\u56de\\u5f53\\u524d\\u7528\\u6237\\u7684\\u89d2\\u8272\\u4fe1\\u606f\"},\"getRoleByName(string)\":{\"notice\":\"\\u901a\\u8fc7\\u89d2\\u8272\\u540d\\u79f0\\u53bb\\u83b7\\u53d6\\u5408\\u7ea6\\u4e2d\\u7684\\u89d2\\u8272\\u4fe1\\u606f\"},\"setLevelConfig((uint256,uint256[],uint256,uint256,uint256,uint8,uint8,uint8,uint8)[])\":{\"notice\":\"\\u8bbe\\u7f6e\\u73a9\\u5bb6\\u5347\\u7ea7\\u7684\\u7b49\\u7ea7\\u914d\\u7f6e\\u8868\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PlantsUnion.sol\":\"PlantsUnion\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Constants {\\n  // \\u521b\\u5efa\\u89d2\\u8272\\u65f6\\uff0c\\u89d2\\u8272\\u540d\\u79f0\\u4e3a\\u7a7a\\n  uint256 public constant ERROR_CODE_101 = 101;\\n  // \\u521b\\u5efa\\u89d2\\u8272\\u65f6\\uff0c\\u89d2\\u8272\\u5df2\\u5b58\\u5728\\n  uint256 public constant ERROR_CODE_102 = 102;\\n  // \\u521b\\u5efa\\u89d2\\u8272\\u65f6\\uff0c\\u73a9\\u5bb6\\u5df2\\u7ecf\\u6709\\u89d2\\u8272\\u4e86\\n  uint256 public constant ERROR_CODE_103 = 103;\\n}\\n\",\"keccak256\":\"0xdddde08822fdba1bc40e76672b53fb08a7bbab314d3c653ddc0e159c3bcdca05\",\"license\":\"MIT\"},\"contracts/PlantsUnion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./modules/RoleInfo.sol\\\";\\nimport \\\"./config/LevelConfig.sol\\\";\\n\\ncontract PlantsUnion is Ownable(msg.sender), RoleInfo {\\n\\n  LevelConfig lvCfg = new LevelConfig();\\n\\n  /// @notice \\u8bbe\\u7f6e\\u73a9\\u5bb6\\u5347\\u7ea7\\u7684\\u7b49\\u7ea7\\u914d\\u7f6e\\u8868\\n  /// @dev \\u662f\\u5426\\u5141\\u8bb8\\u591a\\u6b21\\u8bbe\\u7f6e\\u5462\\uff0c\\u6709\\u5f85\\u5546\\u69b7!!!\\n  function setLevelConfig(LevelConfig.LevelCfg[] memory config) public onlyOwner() {\\n    lvCfg.parseConfig(config);\\n  }\\n}\\n\",\"keccak256\":\"0x1fce8635557d85efc05aef236f595ad439bfd422e06a6b4eda3fd2bc37337a56\",\"license\":\"MIT\"},\"contracts/config/LevelConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ncontract LevelConfig {\\n\\n    /// @dev \\u73a9\\u5bb6\\u5347\\u7ea7\\u7684\\u6570\\u636e\\u7ed3\\u6784\\u4f53\\n    struct LevelCfg {\\n        uint256 level; // \\u5bf9\\u5e94\\u7684\\u7b49\\u7ea7\\n        uint256[] prizes; // \\u5956\\u52b1\\u7684\\u7269\\u54c1\\n        uint256 gold; // \\u5956\\u52b1\\u7684\\u91d1\\u5e01\\n        uint256 levelup_exp; // \\u5347\\u7ea7\\u6240\\u9700\\u8981\\u7684\\u7ecf\\u9a8c\\u503c\\n        uint256 total_exp; // \\u7d2f\\u8ba1\\u603b\\u7ecf\\u9a8c\\u503c\\n        uint8 hunting_num; // \\u5bf9\\u5e94\\u7684\\u72e9\\u730e\\u6b21\\u6570\\n        uint8 garden_plant_num; // \\u82b1\\u56ed\\u7684\\u690d\\u7269\\u6570\\u91cf\\n        uint8 public_place_num; // \\u597d\\u53cb\\u5730\\u7684\\u6570\\u91cf\\n        uint8 war_grid_num; // \\u53ef\\u4ee5\\u5f00\\u542f\\u7684\\u6218\\u6597\\u4f4d\\u6570\\u91cf\\n    }\\n\\n    mapping(uint256 => LevelCfg) private levels;\\n\\n    /// @dev \\u89e3\\u6790\\u73a9\\u5bb6\\u5347\\u7ea7\\u7684\\u7b49\\u7ea7\\u914d\\u7f6e\\u8868\\n    function parseConfig(LevelCfg[] memory config) public {\\n        for (uint i = 0; i < config.length; i++) {\\n            LevelCfg memory cfg = config[i];\\n            levels[cfg.level] = cfg;\\n        }\\n    }\\n\\n    /// @dev \\u6839\\u636e\\u6307\\u5b9a\\u7684\\u7b49\\u7ea7\\u83b7\\u53d6\\u76f8\\u5e94\\u7684\\u914d\\u7f6e\\u4fe1\\u606f\\n    function getLevelCfg(uint256 level) public view returns(LevelCfg memory) {\\n        return levels[level];\\n    }\\n}\\n\",\"keccak256\":\"0xa9a4e22b2bf58f3aeb9f54d9212531ac23a79e4a0dc3a9aa5c91d760edb8b64f\",\"license\":\"MIT\"},\"contracts/modules/RoleInfo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../Constants.sol\\\";\\n\\ncontract RoleInfo {\\n\\n  event RoleCreated(address indexed user, string roleName, uint8 avatarId);\\n\\n  struct Role {\\n    // \\u89d2\\u8272\\u540d\\u79f0\\n    string name;\\n    // \\u89d2\\u8272\\u56fe\\u50cfID\\n    uint8 avatarId;\\n    // \\u89d2\\u8272\\u7b49\\u7ea7\\n    uint32 level;\\n    // \\u6218\\u6597\\u683c\\u5b50\\u6570\\u91cf\\n    uint8 warGridNum;\\n    // \\u91d1\\u5e01\\u6570\\u91cf\\n    uint256 gold;\\n    // \\u521b\\u5efa\\u65f6\\u95f4\\n    uint256 createTime;\\n    // \\u89d2\\u8272\\u7684\\u6240\\u6709\\u8005\\n    address owner;\\n  }\\n\\n  Role[] private allRoles;\\n  mapping(address => Role) private roles;\\n  mapping(string => uint256) private roleIndex;\\n\\n  /**\\n   * \\u521b\\u5efa\\u89d2\\u8272\\n   * \\u5f53\\u7528\\u6237\\u8c03\\u7528\\u6b64\\u51fd\\u6570\\u65f6\\uff0c\\u5b83\\u5c06\\u68c0\\u67e5\\u89d2\\u8272\\u540d\\u79f0\\u662f\\u5426\\u4e3a\\u7a7a\\u3001\\u89d2\\u8272\\u662f\\u5426\\u5df2\\u7ecf\\u5b58\\u5728\\u4ee5\\u53ca\\u7528\\u6237\\u662f\\u5426\\u5df2\\u7ecf\\u6709\\u4e00\\u4e2a\\u89d2\\u8272\\u3002\\n   * \\u5982\\u679c\\u8fd9\\u4e9b\\u6761\\u4ef6\\u5747\\u6ee1\\u8db3\\uff0c\\u5219\\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u89d2\\u8272\\uff0c\\u5e76\\u5c06\\u5176\\u6dfb\\u52a0\\u5230\\u6620\\u5c04\\u548c allRoles \\u6570\\u7ec4\\u4e2d\\u3002\\n   */\\n  function createRole(string memory _name, uint8 _avatarId) public returns (uint256) {\\n    if (bytes(_name).length == 0) {\\n      return Constants.ERROR_CODE_101;\\n    }\\n\\n    if (roleExists(_name)) {\\n      return Constants.ERROR_CODE_102;\\n    }\\n\\n    if (bytes(roles[msg.sender].name).length > 0) {\\n      return Constants.ERROR_CODE_103;\\n    }\\n\\n    Role memory newRole = Role(\\n      _name,\\n      _avatarId,\\n      1,\\n      2,\\n      30000,\\n      block.timestamp,\\n      msg.sender\\n    );\\n    roles[msg.sender] = newRole;\\n    uint256 index = allRoles.length;\\n    roleIndex[_name] = index;\\n    allRoles.push(newRole);\\n\\n    emit RoleCreated(msg.sender, _name, _avatarId);\\n\\n    return 0;\\n  }\\n\\n  /**\\n   * \\u83b7\\u53d6\\u7528\\u6237\\u7684\\u89d2\\u8272\\uff0c\\u8fd4\\u56de\\u5f53\\u524d\\u7528\\u6237\\u7684\\u89d2\\u8272\\u4fe1\\u606f\\n   */\\n  function getRole() public view returns (string memory, uint8, uint32, uint8, uint256, uint256) {\\n    Role memory role = roles[msg.sender];\\n    return (\\n      role.name,\\n      role.avatarId,\\n      role.level,\\n      role.warGridNum,\\n      role.gold,\\n      role.createTime\\n    );\\n  }\\n\\n  /**\\n   * \\u901a\\u8fc7\\u89d2\\u8272\\u540d\\u79f0\\u53bb\\u83b7\\u53d6\\u5408\\u7ea6\\u4e2d\\u7684\\u89d2\\u8272\\u4fe1\\u606f\\n   */\\n  function getRoleByName(string memory _name) public view returns (string memory, uint8, uint32, uint8, uint256, uint256, address) {\\n    if (roleExists(_name)) {\\n      uint256 index = roleIndex[_name];\\n      Role memory role = allRoles[index];\\n      return (\\n        role.name,\\n        role.avatarId,\\n        role.level,\\n        role.warGridNum,\\n        role.gold,\\n        role.createTime,\\n        role.owner\\n      );\\n    }\\n    return ('', 0, 0, 0, 0, 0, address(0));\\n  }\\n\\n  function roleExists(string memory _name) public view returns (bool) {\\n    if (roleIndex[_name] == 0) {\\n      return allRoles.length > 0;\\n    }\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x4392aa9861cc2ca9e63aeb451db2cae97fa3b26e7a5b80b4d6f84b315aee357e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604051610010906100df565b604051809103906000f08015801561002c573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039290921691909117905534801561005957600080fd5b50338061008057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100898161008f565b506100ec565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6106e0806110f383390190565b610ff8806100fb6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c99497f91161005b578063c99497f9146100fe578063d00cce4114610111578063f2fde38b14610134578063fde081741461014757600080fd5b8063035938671461008d57806353a9020e146100b3578063715018a6146100d95780638da5cb5b146100e3575b600080fd5b6100a061009b366004610986565b610161565b6040519081526020015b60405180910390f35b6100c66100c13660046109d4565b6103e2565b6040516100aa9796959493929190610a61565b6100e16105ae565b005b6000546040516001600160a01b0390911681526020016100aa565b6100e161010c366004610b4b565b6105c2565b61012461011f3660046109d4565b61062e565b60405190151581526020016100aa565b6100e1610142366004610ca5565b610668565b61014f6106ab565b6040516100aa96959493929190610cd5565b60008251600003610174575060656103dc565b61017d8361062e565b1561018a575060666103dc565b33600090815260026020526040812080546101a490610d1b565b905011156101b4575060676103dc565b6040805160e08101825284815260ff841660208083019190915260018284015260026060830181905261753060808401524260a08401523360c0840181905260009081529152919091208151829190819061020f9082610da4565b50602082015160018281018054604080870151606088015160ff96871664ffffffffff199094169390931761010063ffffffff909216919091021765ff00000000001916600160281b95909216949094021790556080840151600284015560a084015160038085019190915560c090940151600490930180546001600160a01b0319166001600160a01b039094169390931790925590549051909182916102b7908890610e64565b90815260405190819003602001902055600180548082018255600091909152825183916005027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190819061030c9082610da4565b506020820151600182018054604080860151606087015160ff95861664ffffffffff199094169390931761010063ffffffff909216919091021765ff00000000001916600160281b94909216939093021790556080830151600283015560a0830151600383015560c090920151600490910180546001600160a01b0319166001600160a01b039092169190911790555133907f0a34cbbbd3a8f607a772d8f1efa7267f3c6e6e38b1f534fc5e007c3bf52f795d906103cd9088908890610e80565b60405180910390a26000925050505b92915050565b60606000806000806000806103f68861062e565b1561058057600060038960405161040d9190610e64565b908152602001604051809103902054905060006001828154811061043357610433610ea5565b90600052602060002090600502016040518060e001604052908160008201805461045c90610d1b565b80601f016020809104026020016040519081016040528092919081815260200182805461048890610d1b565b80156104d55780601f106104aa576101008083540402835291602001916104d5565b820191906000526020600020905b8154815290600101906020018083116104b857829003601f168201915b5050509183525050600182015460ff80821660208085019190915263ffffffff610100840416604080860191909152600160281b9093049091166060808501919091526002850154608080860191909152600386015460a0808701919091526004909601546001600160a01b031660c095860152865192870151938701519187015190870151958701519690940151919e50919c50909a5090985090965090945092506105a3915050565b505060408051602081019091526000808252909550935083925082915081905080805b919395979092949650565b6105b6610812565b6105c0600061083f565b565b6105ca610812565b60048054604051634ea2ce6760e01b81526001600160a01b0390911691634ea2ce67916105f991859101610ef6565b600060405180830381600087803b15801561061357600080fd5b505af1158015610627573d6000803e3d6000fd5b5050505050565b60006003826040516106409190610e64565b908152602001604051809103902054600003610660575050600154151590565b506001919050565b610670610812565b6001600160a01b03811661069f57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6106a88161083f565b50565b606060008060008060008060026000336001600160a01b03166001600160a01b031681526020019081526020016000206040518060e00160405290816000820180546106f690610d1b565b80601f016020809104026020016040519081016040528092919081815260200182805461072290610d1b565b801561076f5780601f106107445761010080835404028352916020019161076f565b820191906000526020600020905b81548152906001019060200180831161075257829003601f168201915b5050509183525050600182015460ff808216602080850191909152610100830463ffffffff16604080860191909152600160281b9093049091166060808501919091526002850154608080860191909152600386015460a0808701919091526004909601546001600160a01b031660c0909501949094528551918601519286015190860151938601519590940151909c919b509299509097509195509350915050565b6000546001600160a01b031633146105c05760405163118cdaa760e01b8152336004820152602401610696565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156108c9576108c961088f565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156108f8576108f861088f565b604052919050565b600082601f83011261091157600080fd5b813567ffffffffffffffff81111561092b5761092b61088f565b61093e601f8201601f19166020016108cf565b81815284602083860101111561095357600080fd5b816020850160208301376000918101602001919091529392505050565b803560ff8116811461098157600080fd5b919050565b6000806040838503121561099957600080fd5b823567ffffffffffffffff8111156109b057600080fd5b6109bc85828601610900565b9250506109cb60208401610970565b90509250929050565b6000602082840312156109e657600080fd5b813567ffffffffffffffff8111156109fd57600080fd5b610a0984828501610900565b949350505050565b60005b83811015610a2c578181015183820152602001610a14565b50506000910152565b60008151808452610a4d816020860160208601610a11565b601f01601f19169290920160200192915050565b60e081526000610a7460e083018a610a35565b60ff988916602084015263ffffffff97909716604083015250939095166060840152608083019190915260a08201526001600160a01b0390921660c090920191909152919050565b600067ffffffffffffffff821115610ad657610ad661088f565b5060051b60200190565b600082601f830112610af157600080fd5b81356020610b06610b0183610abc565b6108cf565b82815260059290921b84018101918181019086841115610b2557600080fd5b8286015b84811015610b405780358352918301918301610b29565b509695505050505050565b60006020808385031215610b5e57600080fd5b823567ffffffffffffffff80821115610b7657600080fd5b818501915085601f830112610b8a57600080fd5b8135610b98610b0182610abc565b81815260059190911b83018401908481019088831115610bb757600080fd5b8585015b83811015610c9857803585811115610bd35760008081fd5b8601610120818c03601f1901811315610bec5760008081fd5b610bf46108a5565b89830135815260408084013589811115610c0e5760008081fd5b610c1c8f8d83880101610ae0565b8c84015250606080850135828401526080915081850135818401525060a0808501358284015260c09150610c51828601610970565b9083015260e0610c62858201610970565b828401526101009150610c76828601610970565b90830152610c85848401610970565b9082015285525050918601918601610bbb565b5098975050505050505050565b600060208284031215610cb757600080fd5b81356001600160a01b0381168114610cce57600080fd5b9392505050565b60c081526000610ce860c0830189610a35565b60ff978816602084015263ffffffff96909616604083015250929094166060830152608082015260a00191909152919050565b600181811c90821680610d2f57607f821691505b602082108103610d4f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610d9f57600081815260208120601f850160051c81016020861015610d7c5750805b601f850160051c820191505b81811015610d9b57828155600101610d88565b5050505b505050565b815167ffffffffffffffff811115610dbe57610dbe61088f565b610dd281610dcc8454610d1b565b84610d55565b602080601f831160018114610e075760008415610def5750858301515b600019600386901b1c1916600185901b178555610d9b565b600085815260208120601f198616915b82811015610e3657888601518255948401946001909101908401610e17565b5085821015610e545787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251610e76818460208701610a11565b9190910192915050565b604081526000610e936040830185610a35565b905060ff831660208301529392505050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015610eeb57815187529582019590820190600101610ecf565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610fb457603f1989840301855281516101208151855288820151818a870152610f4c82870182610ebb565b89840151878b0152606080850151908801526080808501519088015260a08085015160ff9081169189019190915260c08086015182169089015260e0808601518216908901526101009485015116939096019290925250509386019390860190600101610f1d565b50909897505050505050505056fea2646970667358221220ee2db7f1da4e4c1668cf258c396fef723319c8e6495ba5fb9319335be7f3a59464736f6c63430008140033608060405234801561001057600080fd5b506106c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634ea2ce671461003b578063953f889114610050575b600080fd5b61004e610049366004610409565b610079565b005b61006361005e366004610563565b610169565b60405161007091906105b7565b60405180910390f35b60005b81518110156101655760008282815181106100995761009961064d565b602090810291909101810151805160009081528083526040902081518155818301518051929450849391926100d49260018501920190610293565b5060408201516002820155606082015160038201556080820151600482015560a08201516005909101805460c084015160e08501516101009586015160ff90811663010000000263ff0000001992821662010000029290921663ffff00001993821690970261ffff19909416951694909417919091171692909217179055508061015d81610663565b91505061007c565b5050565b6101c46040518061012001604052806000815260200160608152602001600081526020016000815260200160008152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b60008281526020818152604091829020825161012081018452815481526001820180548551818602810186019096528086529194929385810193929083018282801561022f57602002820191906000526020600020905b81548152602001906001019080831161021b575b505050918352505060028201546020820152600382015460408201526004820154606082015260059091015460ff80821660808401526101008204811660a0840152620100008204811660c084015263010000009091041660e09091015292915050565b8280548282559060005260206000209081019282156102ce579160200282015b828111156102ce5782518255916020019190600101906102b3565b506102da9291506102de565b5090565b5b808211156102da57600081556001016102df565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff8111828210171561032d5761032d6102f3565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561035c5761035c6102f3565b604052919050565b600067ffffffffffffffff82111561037e5761037e6102f3565b5060051b60200190565b600082601f83011261039957600080fd5b813560206103ae6103a983610364565b610333565b82815260059290921b840181019181810190868411156103cd57600080fd5b8286015b848110156103e857803583529183019183016103d1565b509695505050505050565b803560ff8116811461040457600080fd5b919050565b6000602080838503121561041c57600080fd5b823567ffffffffffffffff8082111561043457600080fd5b818501915085601f83011261044857600080fd5b81356104566103a982610364565b81815260059190911b8301840190848101908883111561047557600080fd5b8585015b83811015610556578035858111156104915760008081fd5b8601610120818c03601f19018113156104aa5760008081fd5b6104b2610309565b898301358152604080840135898111156104cc5760008081fd5b6104da8f8d83880101610388565b8c84015250606080850135828401526080915081850135818401525060a0808501358284015260c0915061050f8286016103f3565b9083015260e06105208582016103f3565b8284015261010091506105348286016103f3565b908301526105438484016103f3565b9082015285525050918601918601610479565b5098975050505050505050565b60006020828403121561057557600080fd5b5035919050565b600081518084526020808501945080840160005b838110156105ac57815187529582019590820190600101610590565b509495945050505050565b6020815281516020820152600060208301516101208060408501526105e061014085018361057c565b91506040850151606085015260608501516080850152608085015160a085015260a085015161061460c086018260ff169052565b5060c085015160ff811660e08601525060e085015161010061063a8187018360ff169052565b9095015160ff1693019290925250919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161068357634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122070c99e2a61754d112eea07d82b29bf1a2a99f0e1411c043a6af877f193b7aaa164736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setLevelConfig((uint256,uint256[],uint256,uint256,uint256,uint8,uint8,uint8,uint8)[])": {
        "details": "是否允许多次设置呢，有待商榷!!!"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createRole(string,uint8)": {
        "notice": "创建角色 当用户调用此函数时，它将检查角色名称是否为空、角色是否已经存在以及用户是否已经有一个角色。 如果这些条件均满足，则创建一个新角色，并将其添加到映射和 allRoles 数组中。"
      },
      "getRole()": {
        "notice": "获取用户的角色，返回当前用户的角色信息"
      },
      "getRoleByName(string)": {
        "notice": "通过角色名称去获取合约中的角色信息"
      },
      "setLevelConfig((uint256,uint256[],uint256,uint256,uint256,uint8,uint8,uint8,uint8)[])": {
        "notice": "设置玩家升级的等级配置表"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/PlantsUnion.sol:PlantsUnion",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 474,
        "contract": "contracts/PlantsUnion.sol:PlantsUnion",
        "label": "allRoles",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Role)470_storage)dyn_storage"
      },
      {
        "astId": 479,
        "contract": "contracts/PlantsUnion.sol:PlantsUnion",
        "label": "roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Role)470_storage)"
      },
      {
        "astId": 483,
        "contract": "contracts/PlantsUnion.sol:PlantsUnion",
        "label": "roleIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 207,
        "contract": "contracts/PlantsUnion.sol:PlantsUnion",
        "label": "lvCfg",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(LevelConfig)444"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Role)470_storage)dyn_storage": {
        "base": "t_struct(Role)470_storage",
        "encoding": "dynamic_array",
        "label": "struct RoleInfo.Role[]",
        "numberOfBytes": "32"
      },
      "t_contract(LevelConfig)444": {
        "encoding": "inplace",
        "label": "contract LevelConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Role)470_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoleInfo.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)470_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Role)470_storage": {
        "encoding": "inplace",
        "label": "struct RoleInfo.Role",
        "members": [
          {
            "astId": 457,
            "contract": "contracts/PlantsUnion.sol:PlantsUnion",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 459,
            "contract": "contracts/PlantsUnion.sol:PlantsUnion",
            "label": "avatarId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 461,
            "contract": "contracts/PlantsUnion.sol:PlantsUnion",
            "label": "level",
            "offset": 1,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 463,
            "contract": "contracts/PlantsUnion.sol:PlantsUnion",
            "label": "warGridNum",
            "offset": 5,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 465,
            "contract": "contracts/PlantsUnion.sol:PlantsUnion",
            "label": "gold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 467,
            "contract": "contracts/PlantsUnion.sol:PlantsUnion",
            "label": "createTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 469,
            "contract": "contracts/PlantsUnion.sol:PlantsUnion",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}